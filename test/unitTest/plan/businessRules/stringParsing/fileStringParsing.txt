Description: Test plan for fileStringParsing.js

--------------------------------------------------------------------------------
testName: getFileNameFromPath_validData
input inputData: string (The string that should have all the folders and path removed from it)
input inputMetaData: string (Not used for this business rule)
output: string (The file name and file extension string without the full path)

testName: getFileNameFromPath_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getFileNameFromPath_inValidInputMetaDataString
input inputData: string (The string that should have all the folders and path removed from it)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: getFileNameFromPath_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getFileNameFromPath_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getFileNameFromPath_inValidInputMetaDataInteger
input inputData: string (The string that should have all the folders and path removed from it)
input inputMetaData: integer (123)
output: ?

testName: getFileNameFromPath_inValidInputMetaDataBoolean
input inputData: string (The string that should have all the folders and path removed from it)
input inputMetaData: boolean (false)
output: ?

testName: getFileNameFromPath_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getFileNameFromPath_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getFileNameFromPath_inValidInputMetaDataUndefined
input inputData: string (The string that should have all the folders and path removed from it)
input inputMetaData: undefined
output: ?

testName: getFileNameFromPath_inValidInputMetaDataNaN
input inputData: string (The string that should have all the folders and path removed from it)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: getFileExtension_validData
input inputData: string (The string that should contain the file name to which we want to get the file extension from)
input inputMetaData: string (Not used for this business rule)
output: string (The file extension such as txt, xml, csv, etc...)

testName: getFileExtension_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getFileExtension_inValidInputMetaDataString
input inputData: string (The string that should contain the file name to which we want to get the file extension from)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: getFileExtension_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getFileExtension_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getFileExtension_inValidInputMetaDataInteger
input inputData: string (The string that should contain the file name to which we want to get the file extension from)
input inputMetaData: integer (123)
output: ?

testName: getFileExtension_inValidInputMetaDataBoolean
input inputData: string (The string that should contain the file name to which we want to get the file extension from)
input inputMetaData: boolean (false)
output: ?

testName: getFileExtension_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getFileExtension_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getFileExtension_inValidInputMetaDataUndefined
input inputData: string (The string that should contain the file name to which we want to get the file extension from)
input inputMetaData: undefined
output: ?

testName: getFileExtension_inValidInputMetaDataNaN
input inputData: string (The string that should contain the file name to which we want to get the file extension from)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: removeDotFromFileExtension_validData
input inputData: string (The string that should contain the file extension that is being modified)
input inputMetaData: string (Not used for this business rule)
output: string (The file extension without the dot prefix)

testName: removeDotFromFileExtension_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: removeDotFromFileExtension_inValidInputMetaDataString
input inputData: string (The string that should contain the file extension that is being modified)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: removeDotFromFileExtension_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: removeDotFromFileExtension_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: removeDotFromFileExtension_inValidInputMetaDataInteger
input inputData: string (The string that should contain the file extension that is being modified)
input inputMetaData: integer (123)
output: ?

testName: removeDotFromFileExtension_inValidInputMetaDataBoolean
input inputData: string (The string that should contain the file extension that is being modified)
input inputMetaData: boolean (false)
output: ?

testName: removeDotFromFileExtension_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used for this business rule)
output: ?

testName: removeDotFromFileExtension_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used for this business rule)
output: ?

testName: removeDotFromFileExtension_inValidInputMetaDataUndefined
input inputData: string (The string that should contain the file extension that is being modified)
input inputMetaData: undefined
output: ?

testName: removeDotFromFileExtension_inValidInputMetaDataNaN
input inputData: string (The string that should contain the file extension that is being modified)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: removeFileExtensionFromFileName_validData
input inputData: string (The string that should have all the characters after the last period in the file name removed)
input inputMetaData: string (Not used for this business rule)
output: string (The same input string but without the file extension or all the characters removed after the last dot)

testName: removeFileExtensionFromFileName_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: removeFileExtensionFromFileName_inValidInputMetaDataString
input inputData: string (The string that should have all the characters after the last period in the file name removed)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: removeFileExtensionFromFileName_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: removeFileExtensionFromFileName_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: removeFileExtensionFromFileName_inValidInputMetaDataInteger
input inputData: string (The string that should have all the characters after the last period in the file name removed)
input inputMetaData: integer (123)
output: ?

testName: removeFileExtensionFromFileName_inValidInputMetaDataBoolean
input inputData: string (The string that should have all the characters after the last period in the file name removed)
input inputMetaData: boolean (false)
output: ?

testName: removeFileExtensionFromFileName_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used for this business rule)
output: ?

testName: removeFileExtensionFromFileName_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used for this business rule)
output: ?

testName: removeFileExtensionFromFileName_inValidInputMetaDataUndefined
input inputData: string (The string that should have all the characters after the last period in the file name removed)
input inputMetaData: undefined
output: ?

testName: removeFileExtensionFromFileName_inValidInputMetaDataNaN
input inputData: string (The string that should have all the characters after the last period in the file name removed)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: ascertainMatchingFilenames_validData
input inputData: string (The first filename and path that should be used in making the file name comparison)
input inputMetaData: string (The second filename and path that should be used in making the file name comparison)
output: boolean (A True or False value to indicate if the file names are equivalent)

testName: ascertainMatchingFilenames_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (The second filename and path that should be used in making the file name comparison)
output: ?

testName: ascertainMatchingFilenames_inValidInputMetaDataString
input inputData: string (The first filename and path that should be used in making the file name comparison)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: ascertainMatchingFilenames_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (The second filename and path that should be used in making the file name comparison)
output: ?

testName: ascertainMatchingFilenames_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (The second filename and path that should be used in making the file name comparison)
output: ?

testName: ascertainMatchingFilenames_inValidInputMetaDataInteger
input inputData: string (The first filename and path that should be used in making the file name comparison)
input inputMetaData: integer (123)
output: ?

testName: ascertainMatchingFilenames_inValidInputMetaDataBoolean
input inputData: string (The first filename and path that should be used in making the file name comparison)
input inputMetaData: boolean (false)
output: ?

testName: ascertainMatchingFilenames_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (The second filename and path that should be used in making the file name comparison)
output: ?

testName: ascertainMatchingFilenames_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (The second filename and path that should be used in making the file name comparison)
output: ?

testName: ascertainMatchingFilenames_inValidInputMetaDataUndefined
input inputData: string (The first filename and path that should be used in making the file name comparison)
input inputMetaData: undefined
output: ?

testName: ascertainMatchingFilenames_inValidInputMetaDataNaN
input inputData: string (The first filename and path that should be used in making the file name comparison)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: supportedFileFormatsAre_validData
input inputData: string (Not used for this business rule)
input inputMetaData: string (Not used for this business rule)
output: string (A coma separated ist of supported file formats. IE a list of file extensions)

testName: supportedFileFormatsAre_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: supportedFileFormatsAre_inValidInputMetaDataString
input inputData: string (Not used for this business rule)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: supportedFileFormatsAre_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: supportedFileFormatsAre_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: supportedFileFormatsAre_inValidInputMetaDataInteger
input inputData: string (Not used for this business rule)
input inputMetaData: integer (123)
output: ?

testName: supportedFileFormatsAre_inValidInputMetaDataBoolean
input inputData: string (Not used for this business rule)
input inputMetaData: boolean (false)
output: ?

testName: supportedFileFormatsAre_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used for this business rule)
output: ?

testName: supportedFileFormatsAre_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used for this business rule)
output: ?

testName: supportedFileFormatsAre_inValidInputMetaDataUndefined
input inputData: string (Not used for this business rule)
input inputMetaData: undefined
output: ?

testName: supportedFileFormatsAre_inValidInputMetaDataNaN
input inputData: string (Not used for this business rule)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: removeXnumberOfFoldersFromEndOfPath_validData
input inputData: string (The path that should have the number of folders removed)
input inputMetaData: string (The number of paths that should be removed from the input path)
output: string (The modified string with the folders removed from the input path)

testName: removeXnumberOfFoldersFromEndOfPath_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (The number of paths that should be removed from the input path)
output: ?

testName: removeXnumberOfFoldersFromEndOfPath_inValidInputMetaDataString
input inputData: string (The path that should have the number of folders removed)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: removeXnumberOfFoldersFromEndOfPath_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (The number of paths that should be removed from the input path)
output: ?

testName: removeXnumberOfFoldersFromEndOfPath_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (The number of paths that should be removed from the input path)
output: ?

testName: removeXnumberOfFoldersFromEndOfPath_inValidInputMetaDataInteger
input inputData: string (The path that should have the number of folders removed)
input inputMetaData: integer (123)
output: ?

testName: removeXnumberOfFoldersFromEndOfPath_inValidInputMetaDataBoolean
input inputData: string (The path that should have the number of folders removed)
input inputMetaData: boolean (false)
output: ?

testName: removeXnumberOfFoldersFromEndOfPath_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (The number of paths that should be removed from the input path)
output: ?

testName: removeXnumberOfFoldersFromEndOfPath_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (The number of paths that should be removed from the input path)
output: ?

testName: removeXnumberOfFoldersFromEndOfPath_inValidInputMetaDataUndefined
input inputData: string (The path that should have the number of folders removed)
input inputMetaData: undefined
output: ?

testName: removeXnumberOfFoldersFromEndOfPath_inValidInputMetaDataNaN
input inputData: string (The path that should have the number of folders removed)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: getFirstTopLevelFolderFromPath_validData
input inputData: string (The path that should be evaluated)
input inputMetaData: string (Not used fore this business rule)
output: string (The folder at the far-right of the input path)

testName: getFirstTopLevelFolderFromPath_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used fore this business rule)
output: ?

testName: getFirstTopLevelFolderFromPath_inValidInputMetaDataString
input inputData: string (The path that should be evaluated)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: getFirstTopLevelFolderFromPath_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (Not used fore this business rule)
output: ?

testName: getFirstTopLevelFolderFromPath_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (Not used fore this business rule)
output: ?

testName: getFirstTopLevelFolderFromPath_inValidInputMetaDataInteger
input inputData: string (The path that should be evaluated)
input inputMetaData: integer (123)
output: ?

testName: getFirstTopLevelFolderFromPath_inValidInputMetaDataBoolean
input inputData: string (The path that should be evaluated)
input inputMetaData: boolean (false)
output: ?

testName: getFirstTopLevelFolderFromPath_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used fore this business rule)
output: ?

testName: getFirstTopLevelFolderFromPath_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used fore this business rule)
output: ?

testName: getFirstTopLevelFolderFromPath_inValidInputMetaDataUndefined
input inputData: string (The path that should be evaluated)
input inputMetaData: undefined
output: ?

testName: getFirstTopLevelFolderFromPath_inValidInputMetaDataNaN
input inputData: string (The path that should be evaluated)
input inputMetaData: NaN
output: ?