description: Test plan for constantArrayParsing.js


--------------------------------------------------------------------------------
testName: getLengthOfLongestStringInArray_validData
input inputData: array<string> (The array for which we should find the longest length string in)
input inputMetaData: string (Not used for this business rule)
output: integer (The length of the longest string in the array)

testName: getLengthOfLongestStringInArray_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getLengthOfLongestStringInArray_inValidInputMetaDataString
input inputData: array<string> (The array for which we should find the longest length string in)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: getLengthOfLongestStringInArray_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getLengthOfLongestStringInArray_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getLengthOfLongestStringInArray_inValidInputMetaDataInteger
input inputData: array<string> (The array for which we should find the longest length string in)
input inputMetaData: integer (123)
output: ?

testName: getLengthOfLongestStringInArray_inValidInputMetaDataBoolean
input inputData: array<string> (The array for which we should find the longest length string in)
input inputMetaData: boolean (false)
output: ?

testName: getLengthOfLongestStringInArray_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getLengthOfLongestStringInArray_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used for this business rule)
output: ?

testName: getLengthOfLongestStringInArray_inValidInputMetaDataUndefined
input inputData: array<string> (The array for which we should find the longest length string in)
input inputMetaData: undefined
output: ?

testName: getLengthOfLongestStringInArray_inValidInputMetaDataNaN
input inputData: array<string> (The array for which we should find the longest length string in)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: searchForPatternsInStringArray_validData
input inputData: array<string> (The array of strings that should be searched for matching patterns)
input inputMetaData: string (Not used for this business rule)
output: array<string> (A string array of common string values found in more than 1 element of the array and 3 or more characters long)

testName: searchForPatternsInStringArray_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: searchForPatternsInStringArray_inValidInputMetaDataString
input inputData: array<string> (The array of strings that should be searched for matching patterns)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: searchForPatternsInStringArray_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: searchForPatternsInStringArray_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: searchForPatternsInStringArray_inValidInputMetaDataInteger
input inputData: array<string> (The array of strings that should be searched for matching patterns)
input inputMetaData: integer (123)
output: ?

testName: searchForPatternsInStringArray_inValidInputMetaDataBoolean
input inputData: array<string> (The array of strings that should be searched for matching patterns)
input inputMetaData: boolean (false)
output: ?

testName: searchForPatternsInStringArray_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used for this business rule)
output: ?

testName: searchForPatternsInStringArray_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used for this business rule)
output: ?

testName: searchForPatternsInStringArray_inValidInputMetaDataUndefined
input inputData: array<string> (The array of strings that should be searched for matching patterns)
input inputMetaData: undefined
output: ?

testName: searchForPatternsInStringArray_inValidInputMetaDataNaN
input inputData: array<string> (The array of strings that should be searched for matching patterns)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: validatePatternsThatNeedImplementation_validData
input inputData: array<string> (The array of strings that should be checked if they are already implemented in the constants system or not)
input inputMetaData: string (Not used for this business rule)
output: string (A coma separated list of constants that are not yet implemented)

testName: validatePatternsThatNeedImplementation_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: validatePatternsThatNeedImplementation_inValidInputMetaDataString
input inputData: array<string> (The array of strings that should be checked if they are already implemented in the constants system or not)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: validatePatternsThatNeedImplementation_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: validatePatternsThatNeedImplementation_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: validatePatternsThatNeedImplementation_inValidInputMetaDataInteger
input inputData: array<string> (The array of strings that should be checked if they are already implemented in the constants system or not)
input inputMetaData: integer (123)
output: ?

testName: validatePatternsThatNeedImplementation_inValidInputMetaDataBoolean
input inputData: array<string> (The array of strings that should be checked if they are already implemented in the constants system or not)
input inputMetaData: boolean (false)
output: ?

testName: validatePatternsThatNeedImplementation_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used for this business rule)
output: ?

testName: validatePatternsThatNeedImplementation_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used for this business rule)
output: ?

testName: validatePatternsThatNeedImplementation_inValidInputMetaDataUndefined
input inputData: array<string> (The array of strings that should be checked if they are already implemented in the constants system or not)
input inputMetaData: undefined 
output: ?

testName: validatePatternsThatNeedImplementation_inValidInputMetaDataNaN
input inputData: array<string> (The array of strings that should be checked if they are already implemented in the constants system or not)
input inputMetaData: NaN
output: ?