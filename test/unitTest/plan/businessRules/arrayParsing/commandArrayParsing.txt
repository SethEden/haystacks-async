description: Test plan for commandArrayParsing.js


--------------------------------------------------------------------------------
testName: solveLehmerCode_validData
input inputData: array<integer> (The Lehmer code addressable index array we will use to permutate over all possible combinations)
input inputMetaData: array<array<string>> (The nested array that contains all instances of strings that should be used when generating permutations)
output: string (The delimited list of possible combinations generated by solving the Lehmer Code)

testName: solveLehmerCode_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: array<array<string>> (The nested array that contains all instances of strings that should be used when generating permutations)
output: ?

testName: solveLehmerCode_inValidInputMetaDataString
input inputData: array<integer> (The Lehmer code addressable index array we will use to permutate over all possible combinations)
input inputMetaDataL string (dfxg24346dfg)
output: ?

testName: solveLehmerCode_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: array<array<string>> (The nested array that contains all instances of strings that should be used when generating permutations)
output: ?

testName: solveLehmerCode_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array<array<string>> (The nested array that contains all instances of strings that should be used when generating permutations)
output: ?

testName: solveLehmerCode_inValidInputMetaDataInteger
input inputData: array<integer> (The Lehmer code addressable index array we will use to permutate over all possible combinations)
input inputMetaDataL integer (123)
output: ?

testName: solveLehmerCode_inValidInputMetaDataBoolean
input inputData: array<integer> (The Lehmer code addressable index array we will use to permutate over all possible combinations)
input inputMetaDataL boolean (false)
output: ?

testName: solveLehmerCode_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: array<array<string>> (The nested array that contains all instances of strings that should be used when generating permutations)
output: ?

testName: solveLehmerCode_inValidInputDataNaN
input inputData: NaN
input inputMetaData: array<array<string>> (The nested array that contains all instances of strings that should be used when generating permutations)
output: ?

testName: solveLehmerCode_inValidInputMetaDataUndefined
input inputData: array<integer> (The Lehmer code addressable index array we will use to permutate over all possible combinations)
input inputMetaDataL undefined
output: ?

testName: solveLehmerCode_inValidInputMetaDataNaN
input inputData: array<integer> (The Lehmer code addressable index array we will use to permutate over all possible combinations)
input inputMetaDataL NaN
output: ?
--------------------------------------------------------------------------------
testName: recursiveArrayExpansion_validData
input inputData: array<integer, array<integer>> (The index of expansion and the array to be expanded as an array object)
input inputMetaData: array<integer> (The Lehmer Codex that should be used to set the limit of expansion based on the index of expansion)
output: array<array<integer>> (The final list of arrays after the array expansion has completed successfully)

testName: recursiveArrayExpansion_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: array<integer> (The Lehmer Codex that should be used to set the limit of expansion based on the index of expansion)
output: ?

testName: recursiveArrayExpansion_inValidInputMetaDataString
input inputData: array<integer, array<integer>> (The index of expansion and the array to be expanded as an array object)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: recursiveArrayExpansion_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: array<integer> (The Lehmer Codex that should be used to set the limit of expansion based on the index of expansion)
output: ?

testName: recursiveArrayExpansion_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array<integer> (The Lehmer Codex that should be used to set the limit of expansion based on the index of expansion)
output: ?

testName: recursiveArrayExpansion_inValidInputMetaDataInteger
input inputData: array<integer, array<integer>> (The index of expansion and the array to be expanded as an array object)
input inputMetaData: integer (123)
output: ?

testName: recursiveArrayExpansion_inValidInputMetaDataBoolean
input inputData: array<integer, array<integer>> (The index of expansion and the array to be expanded as an array object)
input inputMetaData: boolean (false)
output: ?

testName: recursiveArrayExpansion_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: array<integer> (The Lehmer Codex that should be used to set the limit of expansion based on the index of expansion)
output: ?

testName: recursiveArrayExpansion_inValidInputDataNaN
input inputData: NaN
input inputMetaData: array<integer> (The Lehmer Codex that should be used to set the limit of expansion based on the index of expansion)
output: ?

testName: recursiveArrayExpansion_inValidInputMetaDataUndefined
input inputData: array<integer, array<integer>> (The index of expansion and the array to be expanded as an array object)
input inputMetaData: undefined
output: ?

testName: recursiveArrayExpansion_inValidInputMetaDataNaN
input inputData: array<integer, array<integer>> (The index of expansion and the array to be expanded as an array object)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: getLehmerCodeValue_validData
input inputData: array<integer> (The Lehmer code array with indices for values we should get & return)
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string)
output: string (The joined string from each of the array element strings at the Lehmer code indices)

testName: getLehmerCodeValue_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string)
output: ?

testName: getLehmerCodeValue_inValidInputMetaDataString
input inputData: array<integer> (The Lehmer code array with indices for values we should get & return)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: getLehmerCodeValue_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string)
output: ?

testName: getLehmerCodeValue_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string)
output: ?

testName: getLehmerCodeValue_inValidInputMetaDataInteger
input inputData: array<integer> (The Lehmer code array with indices for values we should get & return)
input inputMetaData: integer (123)
output: ?

testName: getLehmerCodeValue_inValidInputMetaDataBoolean
input inputData: array<integer> (The Lehmer code array with indices for values we should get & return)
input inputMetaData: boolean (false)
output: ?

testName: getLehmerCodeValue_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string)
output: ?

testName: getLehmerCodeValue_inValidInputDataNaN
input inputData: NaN
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string)
output: ?

testName: getLehmerCodeValue_inValidInputMetaDataUndefined
input inputData: array<integer> (The Lehmer code array with indices for values we should get & return)
input inputMetaData: undefined
output: ?

testName: getLehmerCodeValue_inValidInputMetaDataNaN
input inputData: array<integer> (The Lehmer code array with indices for values we should get & return)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: generateCommandAliases_validData
input inputData: object (An object containing all of the meta-data needed for command words and command word abbreviations needed to generate every possible combination of command aliases)
input inputMetaData: string (Not used for this business rule)
output: string (A coma-separated list of every possible combination of command aliases)

testName: generateCommandAliases_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: generateCommandAliases_inValidInputMetaDataString
input inputData: object (An object containing all of the meta-data needed for command words and command word abbreviations needed to generate every possible combination of command aliases)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateCommandAliases_inValidInputDataInteger
input inputData: integer (123)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: generateCommandAliases_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: generateCommandAliases_inValidInputMetaDataInteger
input inputData: object (An object containing all of the meta-data needed for command words and command word abbreviations needed to generate every possible combination of command aliases)
input inputMetaData: integer (123)
output: ?

testName: generateCommandAliases_inValidInputMetaDataBoolean
input inputData: object (An object containing all of the meta-data needed for command words and command word abbreviations needed to generate every possible combination of command aliases)
input inputMetaData: boolean (false)
output: ?

testName: generateCommandAliases_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used for this business rule)
output: ?

testName: generateCommandAliases_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used for this business rule)
output: ?

testName: generateCommandAliases_inValidInputMetaDataUndefined
input inputData: object (An object containing all of the meta-data needed for command words and command word abbreviations needed to generate every possible combination of command aliases)
input inputMetaData: undefined
output: ?

testName: generateCommandAliases_inValidInputMetaDataNaN
input inputData: object (An object containing all of the meta-data needed for command words and command word abbreviations needed to generate every possible combination of command aliases)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: aggregateCommandArguments_validData
input inputData: array<string> (An array of strings that represents the command and command parameters to execute)
input inputMetaData: string (Not used for this business rule)
output: string (A sinle string command line of code that should be sent to the command parser)

testName: aggregateCommandArguments_inValidInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: aggregateCommandArguments_inValidInputMetaDataString
input inputData: array<string> (An array of strings that represents the command and command parameters to execute)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: aggregateCommandArguments_inValidInputDataInteger
input inputData: integer(123)
input inputMetaData: string (Not used for this business rule)
output: ?

testName: aggregateCommandArguments_inValidInputDataBoolean
input inputData: boolean (false) 
input inputMetaData: string (Not used for this business rule)
output: ?

testName: aggregateCommandArguments_inValidInputMetaDataInteger
input inputData: array<string> (An array of strings that represents the command and command parameters to execute)
input inputMetaData: integer (123)
output: ?

testName: aggregateCommandArguments_inValidInputMetaDataBoolean
input inputData: array<string> (An array of strings that represents the command and command parameters to execute)
input inputMetaData: boolean (false)
output: ?

testName: aggregateCommandArguments_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used for this business rule)
output: ?

testName: aggregateCommandArguments_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used for this business rule)
output: ?

testName: aggregateCommandArguments_inValidInputMetaDataUndefined
input inputData: array<string> (An array of strings that represents the command and command parameters to execute)
input inputMetaData: undefined
output: ?

testName: aggregateCommandArguments_inValidInputMetaDataNaN
input inputData: array<string> (An array of strings that represents the command and command parameters to execute)
input inputMetaData: NaN
output: ?